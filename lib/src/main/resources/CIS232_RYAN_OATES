CIS 233
Fall 2024
Assignment 2
Author: Ryan Oates

**Overview:** This class implements a recursive method to calculate the power of a number. It checks if the exponent is zero, in which case it returns 1. 

If the exponent is even, it calculates the power of half the exponent and squares the result. 

If the exponent is odd, it multiplies the base number by the result of the power function with itself and the two halves of the exponent to achieve the time complexity of O(log n).

lib\src\main\java\powerofnumrecursive\PowerOfNum.java
```java
package powerofnumrecursive;
public class PowerOfNum {
    public double power(int x, int n) {
        if (n < 0) {
            System.err.println("Negative exponent not allowed: " + n + ". Input a valid number that is greater than or equal to 0");
            return -1;
        }
        if (n == 0) {
            return 1;
        }
        
        double halfPower = power(x, n / 2);
        if (n % 2 == 0) {
            return halfPower * halfPower;
        } else {
            return x * halfPower * halfPower;
        }
    }
}
```

lib\src\main\java\powerofnumrecursive\MainMethod.java
```java
package powerofnumrecursive;

public class MainMethod {
    public static void main(String[] args) {
        PowerOfNum objCreation = new PowerOfNum();
        System.out.println("2^3 = " + objCreation.power(2, 3));
        System.out.println("3^3 = " + objCreation.power(3, 3));
        System.out.println("4^3 = " + objCreation.power(4, 3));
    }
}
```

Flow: Class PowerOfNum
Recursive Method: power(num, exp)
Description of recursive method:
   - User calls `power(num, exp)` (num = base, exp = exponent) ; (Both are integers that are non-negative and stored in variables that serve as auxilliary space placeholders for this power method)
   - If `exp < 0`: 
     - Print error message 
     - Return -1 (error code)
   - If `exp == 0`:
     - Return `1.0` (base case) 
   - Calculate single halfPower value = power(num, exp/2)
   - If `exp % 2 == 0`:
     - Return `halfPower * halfPower` (recursive case) ; (This resolves to the base case when exp is even and the recursion will be a step away from completing)
   - Else:
     - Return `num * halfPower * halfPower` (recursive case) ; (This resolves to the base case when exp is odd and the recursion will be a step away from completing)
```
Flow: Numerical Example

Example: single method call of power(2, 5)

power(2, 5): 
- n = 5 (odd)
- halfPower = power(2, 5/2) = power(2, 2)          // integer division of 5/2 gives us 2. Odd values are handled by multiplying by x one extra time in the recursive case.
- returns 2 * halfPower(i.e power(2, 2)) * halfPower(i.e power(2, 2)) // this gives us 2 * (2^2) * (2^2) = 2 * 4 * 4 = 32

power(2, 2): How this is derived from the initial call of power(2, 5)
- n = 2 (even)
- halfPower = power(2, 1)                      // integer division of 2/2 = 1
- returns halfPower * halfPower                  // this gives us 2 * 2 = 4

power(2, 1): How this is derived from the initial call of power(2, 2)
- n = 1 (odd)
- halfPower = power(2, 0)                  // integer division of 1/2 = 0
- returns 2 * halfPower * halfPower            // this gives us 2 * 1 * 1 = 2

power(2, 0):
- returns 1
```

### Context of recursion: The Stack
#### Explanation of the Call Stack in Recursion
1. Recursive Calls:
When a function calls itself, it creates a new layer in the call stack. 
Each call has its own set of parameters and local variables.

Let’s illustrate this with the example of power(2, 5):
Call Stack Creation:

Recursive Call Stack Analysis for power(x, n):

Example: single method call of power(2, 5)

Call Stack Formation (Going Down):
1. power(2, 5)
   - n is odd, will need: 2 * (halfPower * halfPower)
   - calls power(2, 2) 
   
2. power(2, 2)
   - n is even, will need: halfPower * halfPower
   - calls power(2, 1)
   
3. power(2, 1)
   - n is odd, will need: 2 * (halfPower * halfPower)
   - calls power(2, 0)
   
4. power(2, 0)
   - Base case: Returns 1

Call Stack Resolution (Going Up):
4. power(2, 0) → returns 1
   
3. power(2, 1) 
   - halfPower = 1
   - returns 2 * (1 * 1) = 2
   
2. power(2, 2)
   - halfPower = 2
   - returns 2 * 2 = 4
   
1. power(2, 5)
   - halfPower = 4
   - returns 2 * (4 * 4) = 2 * 16 = 32

Space Complexity Analysis: Auxiliary Space Storage of Recursive Stack Frame
- Each recursive call creates a new stack "frame" storing:
  * The local variables (x, n, halfPower)
  * The return address of those local variables
  * The parameters of the method (x, n). i.e the method signature
- The 'worst case' or "maximum stack depth" = O(log n) because:
  * Each recursive call divides n by 2
  * To reach 0 from n, we need log₂(n) divisions
  * Example: 16 → 8 → 4 → 2 → 1 → 0 (depth = log₂(16) = 4)

Time Complexity Analysis:
- Each recursive call: O(1) operation : 
  * This is because we are only performing a few arithmetic operations (multiplication, addition, and division) which are constant time operations.
- Number of recursive calls: O(log n) 
- Therefore, the 'worst case' total time complexity: O(log n)
- We achieve this by:
  * Dividing the problem size by 2 if the exponent is even (n/2)
  * Leveraging the halfPower calculation as auxiliary space storage of the value to handle the odd exponent case
  * Avoiding unnecessary linear recursion (a decrement of the exponent variable by 1 each recursive call)
  * Tracking the value of n with a loop would be O(n) time complexity
```