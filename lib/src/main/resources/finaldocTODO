```
CIS 233 - 01
Fall 2024
Assignment 2
Author:
Description: This program calculates the power of a number using recursion.
```
```java
public class PowerOfNum {
    public double power(int x, int n) {
        if (n < 0) {
            System.err.println("Negative exponent not allowed: " + n + ". Input a valid number that is greater than or equal to 0");
            return -1;
        }
        if (n == 0) {
            return 1.0;
        }
        
        double halfPower = power(x, n / 2);
        if (n % 2 == 0) {
            return (halfPower * halfPower);
        } else {
            return (x * (halfPower * halfPower));
        }
    }
}
```

Flow: Class PowerOfNum
Recursive Method: power(num, exp)
Description of recursive method:
   - User calls `power(num, exp)` (num = base, exp = exponent) ; (Both are integers that are non-negative and stored in variables that serve as auxilliary space placeholders for this power method)
   - If `exp < 0`: 
     - Print error message 
     - Return -1 (error code)
   - If `exp == 0`:
     - Return `1.0` (base case) 
   - Calculate single halfPower value = power(num, exp/2)
   - If `exp % 2 == 0`:
     - Return `halfPower * halfPower` (recursive case) ; (This resolves to the base case when exp is even and the recursion will be a step away from completing)
   - Else:
     - Return `num * halfPower * halfPower` (recursive case) ; (This resolves to the base case when exp is odd and the recursion will be a step away from completing)
```
