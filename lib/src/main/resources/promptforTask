Objective: This assignment assesses your ability to design and implement a recursive algorithm with a specific time complexity. You will write a function to calculate the power of a number using recursion and analyze its efficiency.

Task:

Write a function power(x, n) that calculates x raised to the power of n, where n is a non-negative integer. Your solution must use recursion. Aim for a time complexity of O(log n).

Requirements:

Functionality: The power(x, n) function should accurately calculate the result for any valid input values of x and n (where n >= 0).
Recursion: The solution must utilize a recursive approach.
Time Complexity: Strive to achieve a time complexity of O(log n).
Explanation: Provide a clear explanation of the time complexity of your code.

Rubric:

Functionality (60%):

Excellent: The function correctly calculates power for all valid inputs. The code is well-structured and easy to understand.

Time Complexity Analysis (20%):

Excellent: Provides a clear and accurate explanation of time complexity. The explanation is well-supported and demonstrates a strong understanding of how recursion affects time complexity.
Code Optimization (20%):

Excellent: The code is optimized to achieve O(log n) time complexity. The recursive approach effectively reduces the number of computations by dividing the problem in half at each step.

Submit a ZIP file named "CIS233_FIRSTNAME_LASTNAME.zip" containing your code and document about time complexity.